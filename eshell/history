ls
mv auth Auth
mv auth _Auth
mv _Auth Auth
ls
rm -rf \ Contacts.tsx 
ls
ls
ls
ls
mv database.yml config/
ls
ls config/database.yml
ls
mv sign_up_* ./sign_up/ 
ls
(require 'project)
(defun current-project-root ()    "Get the current project root or default to the current directory."    (let ((project (project-current nil)))      (if project          (file-name-as-directory (project-root project))        (file-name-as-directory default-directory)))) ;; Fallback to current directory
(current-project-root)
ls
mv *.go ./gols
ls
ls
mv search_strat.py search_strategy.py 
ls
cd ../
ls
mv slack.py teams.py ./chat/ 
(require 'treesit)
(defun list-functions ()(interactive))
(defun list-functions ()(interactive))
(defun my-treesit-list-functions ()  "List all functions in the current buffer with their line numbers using Tree-sitter."  (interactive)  (if (not (treesit-parser-create))      (message "Tree-sitter is not available for this mode.")    (let* ((node (treesit-buffer-root-node))           (functions (treesit-query-capture                       node                       ;; Adjust the query based on the language you're using                       (pcase major-mode                         ('c-mode "(function_definition) @function")                         ('python-mode "(function_definition name: (identifier) @function-name)")                         ('javascript-mode "(function_declaration name: (identifier) @function-name)")                         (_ (error "Unsupported major mode for function listing"))))))      (with-output-to-temp-buffer "*Tree-sitter Functions*"        (princ (format "%-6s %s\n" "Line" "Function"))        (princ (make-string 50 ?-))        (princ "\n")        (dolist (match functions)          (let* ((function-node (cdr match))                 (function-name (treesit-node-text function-node))                 (line (treesit-node-start-line function-node)))            (princ (format "%-6d %s\n" line function-name)))))))))
(require 'treesit)
(defun my-treesit-list-functions ()  "List all functions in the current buffer with their line numbers using Tree-sitter."  (interactive)  (if (not (treesit-parser-create))      (message "Tree-sitter is not available for this mode.")    (let* ((node (treesit-buffer-root-node))           (functions (treesit-query-capture                       node                       ;; Adjust the query based on the language you're using                       (pcase major-mode                         ('c-mode "(function_definition) @function")                         ('python-mode "(function_definition name: (identifier) @function-name)")                         ('javascript-mode "(function_declaration name: (identifier) @function-name)")                         (_ (error "Unsupported major mode for function listing"))))))      (with-output-to-temp-buffer "*Tree-sitter Functions*"        (princ (format "%-6s %s\n" "Line" "Function"))        (princ (make-string 50 ?-))        (princ "\n")        (dolist (match functions)          (let* ((function-node (cdr match))                 (function-name (treesit-node-text function-node))                 (line (treesit-node-start-line function-node)))            (princ (format "%-6d %s\n" line function-name)))))))))
(require 'treesit)
(defun my-treesit-list-functions ()  "List all functions in the current buffer with their line numbers using Tree-sitter."  (interactive)  (if (not (treesit-parser-create))      (message "Tree-sitter is not available for this mode.")    (let* ((node (treesit-buffer-root-node))           (functions (treesit-query-capture                       node                       ;; Adjust the query based on the language you're using                       (pcase major-mode                         ('c-mode "(function_definition) @function")                         ('python-mode "(function_definition name: (identifier) @function-name)")                         ('javascript-mode "(function_declaration name: (identifier) @function-name)")                         (_ (error "Unsupported major mode for function listing"))))))      (with-output-to-temp-buffer "*Tree-sitter Functions*"        (princ (format "%-6s %s\n" "Line" "Function"))        (princ (make-string 50 ?-))        (princ "\n")        (dolist (match functions)          (let ((function-node (cdr match)))            (let ((function-name (treesit-node-text function-node))                  (line (treesit-node-start-line function-node)))              (princ (format "%-6d %s\n" line function-name)))))))))
